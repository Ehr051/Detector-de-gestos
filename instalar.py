#!/usr/bin/env python3
"""
Instalador Autom√°tico - Sistema de Control por Gestos
====================================================

Script para instalar autom√°ticamente todas las dependencias
y configurar el sistema para su uso.
"""

import sys
import subprocess
import os
import platform
from pathlib import Path

def print_banner():
    """Muestra el banner del instalador"""
    print("=" * 70)
    print("    INSTALADOR AUTOM√ÅTICO - SISTEMA DE CONTROL POR GESTOS")
    print("=" * 70)
    print()

def run_command(command, description=""):
    """Ejecuta un comando y maneja errores"""
    if description:
        print(f"üîÑ {description}...")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        if description:
            print(f"   ‚úÖ {description} - Completado")
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        if description:
            print(f"   ‚ùå {description} - Error: {e}")
            print(f"   üìã Salida: {e.stdout}")
            print(f"   üìã Error: {e.stderr}")
        return False, e.stderr

def check_python():
    """Verifica la versi√≥n de Python"""
    print("üêç Verificando Python...")
    
    version = sys.version_info
    if version.major >= 3 and version.minor >= 7:
        print(f"   ‚úÖ Python {version.major}.{version.minor} encontrado")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor} - Se requiere 3.7+")
        return False

def upgrade_pip():
    """Actualiza pip a la √∫ltima versi√≥n"""
    print("üì¶ Actualizando pip...")
    
    commands = [
        f"{sys.executable} -m pip install --upgrade pip"
    ]
    
    for cmd in commands:
        success, output = run_command(cmd, "Actualizando pip")
        if not success:
            print("   ‚ö†Ô∏è  Continuando con la versi√≥n actual de pip...")
            
    return True

def install_requirements():
    """Instala las dependencias desde requirements.txt"""
    print("üìã Instalando dependencias desde requirements.txt...")
    
    if not Path("requirements.txt").exists():
        print("   ‚ùå Archivo requirements.txt no encontrado")
        return install_manual_dependencies()
    
    cmd = f"{sys.executable} -m pip install -r requirements.txt"
    success, output = run_command(cmd, "Instalando dependencias")
    
    if not success:
        print("   ‚ö†Ô∏è  Error instalando desde requirements.txt, intentando instalaci√≥n manual...")
        return install_manual_dependencies()
    
    return True

def install_manual_dependencies():
    """Instala dependencias manualmente"""
    print("üîß Instalaci√≥n manual de dependencias...")
    
    packages = [
        "opencv-python>=4.5.0",
        "numpy>=1.21.0", 
        "mediapipe>=0.10.0",
        "pyautogui>=0.9.54"
    ]
    
    for package in packages:
        cmd = f"{sys.executable} -m pip install {package}"
        success, output = run_command(cmd, f"Instalando {package}")
        if not success:
            print(f"   ‚ùå Error instalando {package}")
            return False
    
    return True

def install_system_dependencies():
    """Instala dependencias espec√≠ficas del sistema"""
    system = platform.system()
    print(f"üñ•Ô∏è  Configurando dependencias para {system}...")
    
    if system == "Darwin":  # macOS
        print("   ‚ÑπÔ∏è  macOS detectado")
        print("   üìù Recomendaciones adicionales:")
        print("      ‚Ä¢ Instalar Homebrew si no est√° instalado")
        print("      ‚Ä¢ Configurar permisos de c√°mara y accesibilidad")
        
    elif system == "Windows":  # Windows
        print("   ‚ÑπÔ∏è  Windows detectado")
        print("   üìù Instalando dependencias adicionales...")
        
        # Intentar instalar Visual C++ redistributable info
        print("   ‚ÑπÔ∏è  Si hay errores, instala Visual C++ Redistributable:")
        print("      https://aka.ms/vs/17/release/vc_redist.x64.exe")
        
    elif system == "Linux":  # Linux
        print("   ‚ÑπÔ∏è  Linux detectado")
        print("   üì¶ Instalando dependencias del sistema...")
        
        linux_packages = [
            "sudo apt-get update",
            "sudo apt-get install -y python3-opencv",
            "sudo apt-get install -y python3-tk python3-dev"
        ]
        
        for cmd in linux_packages:
            success, output = run_command(cmd, f"Ejecutando {cmd.split()[-1]}")
            if not success:
                print(f"   ‚ö†Ô∏è  Error con {cmd}, continuando...")
    
    return True

def create_virtual_environment():
    """Crea un entorno virtual si no existe"""
    venv_path = Path("detector_gestos_env")
    
    if venv_path.exists():
        print("   ‚ÑπÔ∏è  Entorno virtual ya existe")
        return True
    
    print("üèóÔ∏è  Creando entorno virtual...")
    
    cmd = f"{sys.executable} -m venv detector_gestos_env"
    success, output = run_command(cmd, "Creando entorno virtual")
    
    return success

def verify_installation():
    """Verifica que la instalaci√≥n fue exitosa"""
    print("‚úÖ Verificando instalaci√≥n...")
    
    try:
        # Verificar que se puede importar cada dependencia
        import cv2
        print("   ‚úÖ OpenCV - OK")
        
        import mediapipe
        print("   ‚úÖ MediaPipe - OK")
        
        import numpy
        print("   ‚úÖ NumPy - OK")
        
        import pyautogui
        print("   ‚úÖ PyAutoGUI - OK")
        
        # Verificar acceso b√°sico a la c√°mara
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            print("   ‚úÖ Acceso a c√°mara - OK")
            cap.release()
        else:
            print("   ‚ö†Ô∏è  Acceso a c√°mara - Verificar permisos")
        
        print("\nüéâ ¬°Instalaci√≥n completada exitosamente!")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error en verificaci√≥n: {e}")
        return False

def show_next_steps():
    """Muestra los siguientes pasos despu√©s de la instalaci√≥n"""
    print("\n" + "=" * 70)
    print("    SIGUIENTES PASOS")
    print("=" * 70)
    
    print("\nüöÄ Para ejecutar el sistema:")
    print("   python control_gestos.py")
    
    print("\nüîß O usar los launchers:")
    if platform.system() == "Darwin":
        print("   ./launch_macos.sh")
    elif platform.system() == "Windows":
        print("   launch_windows.bat")
    
    print("\nüîç Para verificar el sistema:")
    print("   python verificar_sistema.py")
    
    print("\nüìñ Para m√°s informaci√≥n:")
    print("   ‚Ä¢ Consulta README_v2.md")
    print("   ‚Ä¢ Revisa config.json para configuraci√≥n avanzada")
    
    print(f"\nüîê Configuraci√≥n de permisos ({platform.system()}):")
    if platform.system() == "Darwin":
        print("   ‚Ä¢ Preferencias del Sistema > Seguridad y privacidad > C√°mara")
        print("   ‚Ä¢ Preferencias del Sistema > Seguridad y privacidad > Accesibilidad")
    elif platform.system() == "Windows":
        print("   ‚Ä¢ Configuraci√≥n > Privacidad > C√°mara")
        print("   ‚Ä¢ Ejecutar como administrador si hay problemas")

def main():
    """Funci√≥n principal del instalador"""
    print_banner()
    
    # Verificar Python
    if not check_python():
        print("‚ùå Versi√≥n de Python incompatible. Instala Python 3.7 o superior.")
        return False
    
    # Actualizar pip
    if not upgrade_pip():
        print("‚ö†Ô∏è  Problema actualizando pip, continuando...")
    
    # Instalar dependencias del sistema
    install_system_dependencies()
    
    # Instalar dependencias de Python
    if not install_requirements():
        print("‚ùå Error instalando dependencias de Python")
        return False
    
    # Verificar instalaci√≥n
    if not verify_installation():
        print("‚ùå La verificaci√≥n fall√≥. Revisa los errores anteriores.")
        return False
    
    # Mostrar siguientes pasos
    show_next_steps()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Instalaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
