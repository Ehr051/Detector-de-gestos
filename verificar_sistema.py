#!/usr/bin/env python3
"""
Verificador del Sistema - Detector de Gestos
===========================================

Script para verificar que todos los componentes del sistema
est√©n instalados correctamente antes de ejecutar el programa principal.
"""

import sys
import subprocess
import importlib
import platform
import os
from pathlib import Path

# Intentar importar cv2 con manejo de errores
try:
    import cv2  # type: ignore
    CV2_AVAILABLE = True
except ImportError:
    CV2_AVAILABLE = False
    cv2 = None

def print_header():
    """Muestra el encabezado del verificador"""
    print("=" * 60)
    print("    VERIFICADOR DEL SISTEMA - DETECTOR DE GESTOS")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print("üêç Verificando versi√≥n de Python...")
    version = sys.version_info
    
    if version.major >= 3 and version.minor >= 7:
        print(f"   ‚úÖ Python {version.major}.{version.minor}.{version.micro} - ¬°Correcto!")
        return True
    else:
        print(f"   ‚ùå Python {version.major}.{version.minor}.{version.micro} - Se requiere 3.7+")
        return False

def check_required_packages():
    """Verifica las dependencias requeridas"""
    print("\nüì¶ Verificando dependencias de Python...")
    
    required_packages = {
        'cv2': 'opencv-python',
        'mediapipe': 'mediapipe', 
        'numpy': 'numpy',
        'pyautogui': 'pyautogui'
    }
    
    all_installed = True
    
    for module_name, package_name in required_packages.items():
        try:
            importlib.import_module(module_name)
            print(f"   ‚úÖ {package_name} - Instalado")
        except ImportError:
            print(f"   ‚ùå {package_name} - No instalado")
            all_installed = False
    
    return all_installed

def check_camera():
    """Verifica el acceso a la c√°mara"""
    print("\nüì∑ Verificando acceso a la c√°mara...")
    
    if not CV2_AVAILABLE:
        print("   ‚ùå C√°mara - OpenCV no est√° disponible")
        return False
    
    try:
        cap = cv2.VideoCapture(0)  # type: ignore
        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                print("   ‚úÖ C√°mara - Accesible y funcionando")
                result = True
            else:
                print("   ‚ö†Ô∏è  C√°mara - Accesible pero no puede capturar frames")
                result = False
            cap.release()
        else:
            print("   ‚ùå C√°mara - No se puede acceder")
            result = False
    except Exception as e:
        print(f"   ‚ùå C√°mara - Error: {e}")
        result = False
    
    return result

def check_system_permissions():
    """Verifica permisos del sistema seg√∫n la plataforma"""
    print(f"\nüîê Verificando permisos del sistema ({platform.system()})...")
    
    if platform.system() == "Darwin":  # macOS
        print("   ‚ÑπÔ∏è  macOS detectado")
        print("   üìã Permisos requeridos:")
        print("      ‚Ä¢ C√°mara: Preferencias > Seguridad y privacidad > C√°mara")
        print("      ‚Ä¢ Accesibilidad: Preferencias > Seguridad y privacidad > Accesibilidad")
        print("   ‚ö†Ô∏è  Aseg√∫rate de haber configurado estos permisos manualmente")
        
    elif platform.system() == "Windows":  # Windows
        print("   ‚ÑπÔ∏è  Windows detectado")
        print("   üìã Recomendaciones:")
        print("      ‚Ä¢ Ejecutar como administrador si hay problemas")
        print("      ‚Ä¢ Verificar permisos de c√°mara en Configuraci√≥n > Privacidad")
        print("      ‚Ä¢ Instalar Visual C++ Redistributable si es necesario")
        
    elif platform.system() == "Linux":  # Linux
        print("   ‚ÑπÔ∏è  Linux detectado")
        print("   üìã Recomendaciones:")
        print("      ‚Ä¢ Asegurar que el usuario est√° en el grupo 'video'")
        print("      ‚Ä¢ Verificar permisos de dispositivos /dev/video*")
    
    return True

def check_files():
    """Verifica que los archivos necesarios existan"""
    print("\nüìÅ Verificando archivos del proyecto...")
    
    required_files = [
        'control_gestos.py',
        'requirements.txt',
        'config.json'
    ]
    
    optional_files = [
        'DetectorGestosOptimizado.py',
        'DetectorGestos.py',
        'launch_macos.sh',
        'launch_windows.bat'
    ]
    
    all_present = True
    
    for file_name in required_files:
        if Path(file_name).exists():
            print(f"   ‚úÖ {file_name} - Encontrado")
        else:
            print(f"   ‚ùå {file_name} - No encontrado (REQUERIDO)")
            all_present = False
    
    for file_name in optional_files:
        if Path(file_name).exists():
            print(f"   ‚úÖ {file_name} - Encontrado")
        else:
            print(f"   ‚ö†Ô∏è  {file_name} - No encontrado (opcional)")
    
    return all_present

def check_pyautogui_config():
    """Verifica la configuraci√≥n de PyAutoGUI"""
    print("\nüñ±Ô∏è  Verificando configuraci√≥n de PyAutoGUI...")
    
    try:
        import pyautogui  # type: ignore
        
        # Obtener informaci√≥n de la pantalla
        screen_size = pyautogui.size()
        print(f"   ‚úÖ Resoluci√≥n de pantalla: {screen_size[0]}x{screen_size[1]}")
        
        # Verificar configuraci√≥n de seguridad
        print(f"   ‚ÑπÔ∏è  Fail-safe activado: {pyautogui.FAILSAFE}")
        print(f"   ‚ÑπÔ∏è  Tiempo de pausa: {pyautogui.PAUSE}s")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error configurando PyAutoGUI: {e}")
        return False

def provide_installation_help():
    """Proporciona ayuda para la instalaci√≥n"""
    print("\n" + "=" * 60)
    print("    AYUDA PARA LA INSTALACI√ìN")
    print("=" * 60)
    
    print("\nüîß Para instalar dependencias faltantes:")
    print("   pip install -r requirements.txt")
    
    print("\nüîß O instalar individualmente:")
    print("   pip install opencv-python mediapipe numpy pyautogui")
    
    print("\nüöÄ Para ejecutar con los launchers:")
    if platform.system() == "Darwin":
        print("   ./launch_macos.sh")
    elif platform.system() == "Windows":
        print("   launch_windows.bat")
    
    print("\nüìñ Para m√°s ayuda, consulta README_v2.md")

def main():
    """Funci√≥n principal del verificador"""
    print_header()
    
    checks = [
        ("Python", check_python_version()),
        ("Dependencias", check_required_packages()),
        ("C√°mara", check_camera()),
        ("Permisos", check_system_permissions()),
        ("Archivos", check_files()),
        ("PyAutoGUI", check_pyautogui_config())
    ]
    
    print("\n" + "=" * 60)
    print("    RESUMEN DE VERIFICACI√ìN")
    print("=" * 60)
    
    passed = 0
    total = len(checks)
    
    for check_name, result in checks:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {check_name:.<30} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} verificaciones pasaron")
    
    if passed == total:
        print("\nüéâ ¬°Todo est√° configurado correctamente!")
        print("   Puedes ejecutar el programa principal:")
        print("   python control_gestos.py")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} problemas encontrados.")
        provide_installation_help()
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
